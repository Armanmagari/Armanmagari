#!/usr/bin/env python3
import logging
from html import escape
import pickledb
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# Import your bot's token and name from a config file
from config import BOTNAME, TOKEN

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Create a database object
db = pickledb.load("bot.db", True)

if not db.get("chats"):
    db.set("chats", [])

# Help text for the bot
help_text = (
    "Welcomes everyone that enters a group chat that this bot is a part of.\n"
    "Commands:\n\n"
    "/welcome - Set welcome message\n"
    "/goodbye - Set goodbye message\n"
    "/disable_goodbye - Disable the goodbye message\n"
    "/lock - Only the person who invited the bot can change messages\n"
    "/unlock - Everyone can change messages\n"
)

# Helper function to send messages with error handling
async def send_async(context, *args, **kwargs):
    try:
        await context.bot.send_message(*args, **kwargs)
    except Exception as e:
        logger.error(f"Failed to send message: {e}")

# Check if the user has admin privileges in the group
async def check_admin_privileges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat.id
    chat_admins = await context.bot.get_chat_administrators(chat_id)
    if user.id not in [admin.user.id for admin in chat_admins]:
        await send_async(context, chat_id=chat_id, text="Only admins can execute this command.")
        return False
    return True

# Helper function to check access to commands
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE, override_lock=None):
    chat_id = update.message.chat.id
    chat_str = str(chat_id)

    if update.message.chat.type not in ['group', 'supergroup']:
        await send_async(context, chat_id=chat_id, text="Please add me to a group first!")
        return False

    locked = override_lock if override_lock is not None else db.get(chat_str + "_lck")

    if locked and db.get(chat_str + "_adm") != update.message.from_user.id:
        await send_async(
            context,
            chat_id=chat_id,
            text="Sorry, only the person who invited me can do that.",
        )
        return False

    return True

# Function to handle welcoming new members
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE, new_member):
    message = update.message
    chat_id = message.chat.id
    logger.info("%s joined chat %d (%s)", escape(new_member.first_name), chat_id, escape(message.chat.title))

    text = db.get(str(chat_id)) or "Hello $username! Welcome to $title ðŸ˜Š"
    text = text.replace("$username", new_member.first_name).replace("$title", message.chat.title)
    await send_async(context, chat_id=chat_id, text=text)

# Function to handle saying goodbye to members
async def goodbye(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = message.chat.id
    logger.info("%s left chat %d (%s)", escape(message.left_chat_member.first_name), chat_id, escape(message.chat.title))

    text = db.get(str(chat_id) + "_bye") or "Goodbye, $username!"
    text = text.replace("$username", message.left_chat_member.first_name).replace("$title", message.chat.title)
    await send_async(context, chat_id=chat_id, text=text)

# Introduce the bot when it's added to a group
async def introduce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    invited = update.message.from_user.id

    logger.info("Invited by %s to chat %d (%s)", invited, chat_id, update.message.chat.title)
    
    db.set(str(chat_id) + "_adm", invited)
    db.set(str(chat_id) + "_lck", True)

    text = f"Hello {update.message.chat.title}! I will now greet anyone who joins this chat with a nice message ðŸ˜Š\nCheck the /help command for more info!"
    await send_async(context, chat_id=chat_id, text=text)

# Handle the /help command
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    await send_async(context, chat_id=chat_id, text=help_text)

# Set the welcome message
async def set_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if not await check(update, context):
        return

    message = update.message.text.partition(" ")[2]
    if not message:
        await send_async(context, chat_id=chat_id, text="You need to send a message, too! For example:\n<code>/welcome Hello $username, welcome to $title!</code>")
        return

    db.set(str(chat_id), message)
    await send_async(context, chat_id=chat_id
