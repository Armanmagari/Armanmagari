#!/usr/bin/env python3
import logging
from html import escape
import pickledb
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# Import your bot's token and name from a config file
from config import BOTNAME, TOKEN

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Create a database object
db = pickledb.load("bot.db", True)

if not db.get("chats"):
    db.set("chats", [])

# Help text for the bot
help_text = (
    "Welcomes everyone that enters a group chat that this bot is a part of.\n"
    "Commands:\n\n"
    "/welcome - Set welcome message\n"
    "/goodbye - Set goodbye message\n"
    "/disable_goodbye - Disable the goodbye message\n"
    "/lock - Only the person who invited the bot can change messages\n"
    "/unlock - Everyone can change messages\n"
)

# Helper function to send messages with error handling
async def send_async(context, *args, **kwargs):
    try:
        await context.bot.send_message(*args, **kwargs)
    except Exception as e:
        logger.error(f"Failed to send message: {e}")

# Check if the user has admin privileges in the group
async def check_admin_privileges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    chat_id = update.message.chat.id
    chat_admins = await context.bot.get_chat_administrators(chat_id)
    if user.id not in [admin.user.id for admin in chat_admins]:
        await send_async(context, chat_id=chat_id, text="Only admins can execute this command.")
        return False
    return True

# Helper function to check access to commands
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE, override_lock=None):
    chat_id = update.message.chat.id
    chat_str = str(chat_id)

    if update.message.chat.type not in ['group', 'supergroup']:
        await send_async(context, chat_id=chat_id, text="Please add me to a group first!")
        return False

    locked = override_lock if override_lock is not None else db.get(chat_str + "_lck")

    if locked and db.get(chat_str + "_adm") != update.message.from_user.id:
        await send_async(
            context,
            chat_id=chat_id,
            text="Sorry, only the person who invited me can do that.",
        )
        return False

    return True

# Function to handle welcoming new members
async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE, new_member):
    message = update.message
    chat_id = message.chat.id
    logger.info("%s joined chat %d (%s)", escape(new_member.first_name), chat_id, escape(message.chat.title))

    text = db.get(str(chat_id)) or "Hello $username! Welcome to $title ðŸ˜Š"
    text = text.replace("$username", new_member.first_name).replace("$title", message.chat.title)
    await send_async(context, chat_id=chat_id, text=text)

# Function to handle saying goodbye to members
async def goodbye(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    chat_id = message.chat.id
    logger.info("%s left chat %d (%s)", escape(message.left_chat_member.first_name), chat_id, escape(message.chat.title))

    text = db.get(str(chat_id) + "_bye") or "Goodbye, $username!"
    text = text.replace("$username", message.left_chat_member.first_name).replace("$title", message.chat.title)
    await send_async(context, chat_id=chat_id, text=text)

# Introduce the bot when it's added to a group
async def introduce(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    invited = update.message.from_user.id

    logger.info("Invited by %s to chat %d (%s)", invited, chat_id, update.message.chat.title)
    
    db.set(str(chat_id) + "_adm", invited)
    db.set(str(chat_id) + "_lck", True)

    text = f"Hello {update.message.chat.title}! I will now greet anyone who joins this chat with a nice message ðŸ˜Š\nCheck the /help command for more info!"
    await send_async(context, chat_id=chat_id, text=text)

# Handle the /help command
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    await send_async(context, chat_id=chat_id, text=help_text)

# Set the welcome message
async def set_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if not await check(update, context):
        return

    message = update.message.text.partition(" ")[2]
    if not message:
        await send_async(context, chat_id=chat_id, text="You need to send a message, too! For example:\n<code>/welcome Hello $username, welcome to $title!</code>")
        return

    db.set(str(chat_id), message)
    await send_async(context, chat_id=chat_id, text="Got it!")

# Set the goodbye message
async def set_goodbye(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if not await check(update, context):
        return

    message = update.message.text.partition(" ")[2]
    if not message:
        await send_async(context, chat_id=chat_id, text="You need to send a message, too! For example:\n<code>/goodbye Goodbye, $username!</code>")
        return

    db.set(str(chat_id) + "_bye", message)
    await send_async(context, chat_id=chat_id, text="Got it!")

# Disable the goodbye message
async def disable_goodbye(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if not await check(update, context):
        return

    db.set(str(chat_id) + "_bye", False)
    await send_async(context, chat_id=chat_id, text="Goodbye message disabled.")

# Lock settings for the group
async def lock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if not await check_admin_privileges(update, context):
        return

    db.set(str(chat_id) + "_lck", True)
    await send_async(context, chat_id=chat_id, text="Settings locked.")

# Unlock settings for the group
async def unlock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id

    if not await check_admin_privileges(update, context):
        return

    db.set(str(chat_id) + "_lck", False)
    await send_async(context, chat_id=chat_id, text="Settings unlocked.")

# Handle new members or members leaving
async def empty_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chats = db.get("chats")

    if update.message.chat.id not in chats:
        chats.append(update.message.chat.id)
        db.set("chats", chats)
        logger.info("I have been added to %d chats" % len(chats))

    if update.message.new_chat_members:
        for new_member in update.message.new_chat_members:
            if new_member.is_bot:
                return
            await welcome(update, context, new_member)

    elif update.message.left_chat_member is not None:
        if not update.message.left_chat_member.is_bot:
            await goodbye(update, context)

# Handle errors
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    logger.error(f"An error occurred: {error}")
    if update:
        await send_async(context, chat_id=update.message.chat.id, text="An unexpected error occurred, please try again.")

# Main function to start the bot
async def main():
    # Create the application and pass it your bot's token.
    application = ApplicationBuilder().token(TOKEN).build()

    # Register handlers
    application.add_handler(CommandHandler("start", help))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("welcome", set_welcome))
    application.add_handler(CommandHandler("goodbye", set_goodbye))
    application.add_handler(CommandHandler("disable_goodbye", disable_goodbye))
    application.add_handler(CommandHandler("lock", lock))
    application.add_handler(CommandHandler("unlock", unlock))

    # Correct filters for new and left chat members
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, empty_message))
    application.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, empty_message))

    application.add_error_handler(error)

    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
